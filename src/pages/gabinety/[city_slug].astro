---
import { PrismaClient, Doctor, Spec } from "@prisma/client";
import Page from "../../components/Page.astro";
import Header from "../../layouts/Header.astro";
import PageTitle from "../../components/PageTitle.astro";
import type { Specialization } from "../../types";
import Main from "../../layouts/Main.astro";

const sortDoctors = (a: Doctor, b: Doctor) => {
  return a.name.localeCompare(b.name);
}

const reduceSpec = (drs: Doctor[]) => (acc: Specialization[], cv: Spec) =>
  acc.concat({
    specName: cv.name,
    drs: drs
      .filter((d) => d.spec_id === cv.id)
      .sort(sortDoctors)
  });

export async function getStaticPaths() {
  const client = new PrismaClient();
  const ac = await client.city.findMany({});

  await client.$disconnect();

  return ac.map(({ id, name, slug }) => ({ params: { city_slug: slug } }));
}

const client = new PrismaClient();
const allCities = await client.city.findMany({});
const { city_slug } = Astro.params;
const mCity = allCities.find((d) => d.slug === city_slug);

if (!mCity) throw new Error(`${city_slug} does not match any city`);

const { name } = mCity;

const specsPr = client.spec.findMany({});

const drsPr = client.doctor.findMany({
  where: { city_id: mCity.id },
});


const [specs, drs] = await Promise.all([specsPr, drsPr]);

const withDoctors = reduceSpec(drs);

const nonEmptySpecs = (s: Specialization) => s.drs.length > 0;

const specializations: Specialization[] = specs
  .reduce(withDoctors, [])
  .filter(nonEmptySpecs);

console.log(`Found specs:`, JSON.stringify(specializations, null, 2));

await client.$disconnect();
---

<style>
  .specializations {
    width: calc(100% + 4px);
    min-height: calc(100vh - var(--header-h));
    display: flex;
    flex-wrap: wrap;
    background: var(--primary-color);
    color: var(--secondary-color);
  }
  .spec {
    /* border-right: 2px solid var(--secondary-color); */
    /* border-top: 2px solid var(--secondary-color); */
    padding: 20px;
    flex-basis: calc(50% - 1px);
    flex-grow: 1;
    flex-shrink: 1;
  }
  .traits {
    list-style: none;
    padding-top: 40px;
  }
  .traits li {
    padding: 10px 0px;
  }
</style>
<Main>
    <Page color="violet">
        <Header slot="header">
            <PageTitle slot="lhs" title="Lista gabinetow lekarskich" />
        </Header>
        <section class="specializations" slot="body">
            <>
            {specializations.map((s) => (
                <div class="spec">
                    <h2>{s.specName}</h2>
                    {s.drs.map((d) => (
                        <ul class="traits">
                          <li>{d.room}</li>
                          {d.name && <li>{d.name}</li>}
                          {d.address && <li>{d.address}</li>}
                          {d.phone && <li>{d.phone}</li>}
                          {d.url && <li>{d.url}</li>}
                        </ul>
                    ))}
                </div>
            ))}
            </>
        </section>
    </Page>
</Main>
